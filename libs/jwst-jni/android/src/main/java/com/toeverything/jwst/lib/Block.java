// Automatically generated by flapigen
package com.toeverything.jwst.lib;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public final class Block {

    public Block(@NonNull Workspace workspace, @NonNull String block_id, @NonNull String flavor, long operator) {
        long a0 = workspace.mNativeObj;
        mNativeObj = init(a0, block_id, flavor, operator);
        JNIReachabilityFence.reachabilityFence1(workspace);
    }
    private static native long init(long workspace, @NonNull String block_id, @NonNull String flavor, long operator);

    public final @NonNull String id() {
        String ret = do_id(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_id(long self);

    public final @NonNull String flavor() {
        String ret = do_flavor(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_flavor(long self);

    public final @NonNull String version() {
        String ret = do_version(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_version(long self);

    public final long created() {
        long ret = do_created(mNativeObj);

        return ret;
    }
    private static native long do_created(long self);

    public final long updated() {
        long ret = do_updated(mNativeObj);

        return ret;
    }
    private static native long do_updated(long self);

    public final @NonNull java.util.Optional<String> parent() {
        String ret = do_parent(mNativeObj);
        java.util.Optional<String> convRet = java.util.Optional.ofNullable(ret);

        return convRet;
    }
    private static native @Nullable String do_parent(long self);

    public final @NonNull java.lang.String [] children() {
        java.lang.String [] ret = do_children(mNativeObj);

        return ret;
    }
    private static native @NonNull java.lang.String [] do_children(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ Block(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}